DROP TABLE CANDIDATOXCARGO_PUBLICO;
DROP TABLE CARGOPUBLICO;
DROP TABLE PROFESIONXCANDIDATO;
DROP TABLE PROFESION;
DROP TABLE CANDIDATO;
DROP TABLE PARTIDO;
DROP TABLE CIUDAD;
DROP SEQUENCE CODI_PROFESION;
CREATE TABLE CIUDAD(
    CODIGO_CIUDAD NUMERIC(10,0),
    NOMBRE VARCHAR2(20) NOT NULL,
    PRIMARY KEY(CODIGO_CIUDAD)
);
COMMIT;
CREATE TABLE PARTIDO(
    CODIGO_PARTIDO NUMERIC(10,0),
    NOMBRE_PARTIDO VARCHAR2(50) NOT NULL,
    FECHA_FUNDACION DATE,
    ESLOGAN VARCHAR2(120),
    PRIMARY KEY(CODIGO_PARTIDO)
);
COMMIT;
CREATE TABLE CANDIDATO( 
    CODIGO_CANDIDATO NUMERIC(10,0),
    NOMBRES VARCHAR2(20) NOT NULL,
    APELLIDOS VARCHAR2(20) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL,
    GENERO CHAR(1) NOT NULL,
    CODIGO_CIUDAD NUMERIC(10,1) NOT NULL,
    CODIGO_PARTIDO NUMERIC(10,1) NOT NULL,
    PRIMARY KEY(CODIGO_CANDIDATO),
    FOREIGN KEY (CODIGO_CIUDAD) REFERENCES CIUDAD,
    FOREIGN KEY (CODIGO_PARTIDO) REFERENCES PARTIDO
);
COMMIT;
CREATE TABLE PROFESION(
    CODIGO_PROFESION NUMERIC(10,0),
    DESCRIPCION VARCHAR2(40) NOT NULL,
    PRIMARY KEY(CODIGO_PROFESION)
);
CREATE TABLE PROFESIONXCANDIDATO(
    CODIGO_CANDIDATO NUMERIC(10,0),
    CODIGO_PROFESION NUMERIC(10,0),
    FOREIGN KEY (CODIGO_CANDIDATO) REFERENCES CANDIDATO,
    FOREIGN KEY (CODIGO_PROFESION) REFERENCES PROFESION
);
COMMIT;
CREATE TABLE CARGOPUBLICO(
    CODIGO_CARGO_PUBLICO NUMERIC(10,0),
    DESCRIPCION VARCHAR2(60),
    PRIMARY KEY (CODIGO_CARGO_PUBLICO)
);
CREATE TABLE CANDIDATOXCARGO_PUBLICO(
    CODIGO_CANDIDATO NUMERIC(10,0),
    CODIGO_CARGO_PUBLICO NUMERIC(10,0),
    FECHA_DESDE DATE,
    FECHA_HASTA DATE,
    FOREIGN KEY(CODIGO_CANDIDATO) REFERENCES CANDIDATO,
    FOREIGN KEY(CODIGO_CARGO_PUBLICO) REFERENCES CARGOPUBLICO
);
COMMIT;


PROMPT INSERTANDO CIUDADES
INSERT INTO CIUDAD VALUES (63001,'ARMENIA');
INSERT INTO CIUDAD VALUES (110111, 'BOGOTÁ');
INSERT INTO CIUDAD VALUES (520001, 'SAN JUAN DE PASTO');
INSERT INTO CIUDAD VALUES (15469, 'MONIQUIRÁ');
INSERT INTO CIUDAD VALUES (661020,'SANTA ROSA DE CABAL');
INSERT INTO CIUDAD VALUES (050001, 'MEDELLÍN');
COMMIT;
PROMPT INSERTANDO PARTIDOS
INSERT INTO PARTIDO VALUES (1001,'COLOMBIA JUSTA LIBRES',(TO_DATE('01/01/2017','DD/MM/YYYY')),'HAGÁMOSLO JUNTOS');
INSERT INTO PARTIDO VALUES (0000,'SIN DEFINIR',(TO_DATE('01/01/2090','DD/MM/YYYY')),'_');
INSERT INTO PARTIDO VALUES (1002,'CENTRO DEMOCRATICO',(TO_DATE('15/07/2014','DD/MM/YYYY')),'MANO FIRME, CORAZÓN GRANDE');
INSERT INTO PARTIDO VALUES (1003,'EN MARCHA',(TO_DATE('01/10/2018','DD/MM/YYYY')),'EL PARTIDO LIBERAL REPRESENTA EL PASADO; EL MOVIMIENTO EN MARCHA, REPRESENTA EL FUTURO');
INSERT INTO PARTIDO VALUES (1004,'ACTIVISTA',(TO_DATE('26/01/2019','DD/MM/YYYY')),'EL MOMENTO DE UN CAMBIO CULTURAL Y POLÍTICO, ¡ES AHORA!');
INSERT INTO PARTIDO VALUES (1005,'POLO DEMOCRATICO ALTERNATIVO',(TO_DATE('01/12/2005','DD/MM/YYYY')),'¡LE TOCA A COLOMBIA!');
INSERT INTO PARTIDO VALUES (1006,'MOVIMIENTO ALTERNATIVO INDIGENA Y SOCIAL',(TO_DATE('25/09/2013','DD/MM/YYYY')),'COMPROMISO DE PAÍS');
INSERT INTO PARTIDO VALUES (1007,'ALIANZA VERDE',(TO_DATE('02/10/2009','DD/MM/YYYY')),'¡ES CON ACCIONES!¡SE PUEDE!');
INSERT INTO PARTIDO VALUES (1008, 'VOY POR TI BOGOTÁ', NULL, NULL);
INSERT INTO PARTIDO VALUES (1009, 'COLOMBIA HUMANA', (TO_DATE('30/10/2011', 'DD/MM/YYYY')), 'POR UNA COLOMBIA HUMANA Y EN PAZ');
INSERT INTO PARTIDO VALUES (1010, 'AVANCEMOS', NULL, NULL);
COMMIT;
PROMPT INSERTANDO CANDIDATOS
INSERT INTO CANDIDATO VALUES (100, 'RICARDO', 'ARIAS MORA', (TO_DATE('05/07/1958', 'DD/MM/YYYY')), 'M', 63001, 1001);
INSERT INTO CANDIDATO VALUES (101, 'CARLOS FERNANDO', 'GALAN PACHÓN', (TO_DATE('04/06/1977', 'DD/MM/YYYY')), 'M', 110111, 0000);
INSERT INTO CANDIDATO VALUES (102, 'ANGELA SOFÍA', 'GARZÓN CAICEDO', (TO_DATE('28/05/1977', 'DD/MM/YYYY')), 'F', 110111, 1002);
INSERT INTO CANDIDATO VALUES (103, 'LUIS EDUARDO', 'GARZÓN', (TO_DATE('15/02/1951', 'DD/MM/YYYY')), 'M', 110111, 1003);
INSERT INTO CANDIDATO VALUES (104, 'LUIS ERNESTO' , 'GOMEZ LONDOÑO', (TO_DATE('01/01/1981', 'DD/MM/YYYY')), 'M', 050001, 1004);
INSERT INTO CANDIDATO VALUES (105, 'SAMUEL ALEJANDRO', 'HOYOS MEJÍA', (TO_DATE('30/05/1984', 'DD/MM/YYYY')), 'M', 110111, 1002);
INSERT INTO CANDIDATO VALUES (106, 'DIEGO ANDRÉS', 'MOLANO APONTE', (TO_DATE('29/06/1970', 'DD/MM/YYYY')), 'M', 110111, 1002);
INSERT INTO CANDIDATO VALUES (107, 'CLAUDIA NAYIBE', 'LÓPEZ HERNÁNDEZ', (TO_DATE('09/03/1970', 'DD/MM/YYYY')), 'F', 110111, 1007);
INSERT INTO CANDIDATO VALUES (108, 'HOLLMAN FELIPE', 'MORRIS RINCÓN', (TO_DATE('17/08/1969', 'DD/MM/YYYY')), 'M', 110111, 1006);
INSERT INTO CANDIDATO VALUES (109, 'ANTONIO JOSÉ', 'NAVARRO WOLFF', (TO_DATE('09/07/1948', 'DD/MM/YYYY')), 'M', 520001, 1007);
INSERT INTO CANDIDATO VALUES (110, 'MARIA ANDREA', 'NIETO', (TO_DATE('01/01/1976', 'DD/MM/YYYY')), 'F', 110111, 1008);
INSERT INTO CANDIDATO VALUES (111, 'SEGUNDO CELIO', 'NIEVES HERRERA', (TO_DATE('06/09/1955', 'DD/MM/YYYY')), 'M', 15469, 1005);
INSERT INTO CANDIDATO VALUES (112, 'JORGE ENRIQUE', 'ROJAS RODRÍGUEZ', (TO_DATE('19/08/1959', 'DD/MM/YYYY')), 'M', 661020, 1009);
INSERT INTO CANDIDATO VALUES (113, 'MIGUEL', 'URIBE TURBAY', (TO_DATE('28/01/1986', 'DD/MM/YYYY')), 'M', 110111, 1010);
COMMIT;

PROMPT INSERT PROFESIONES
CREATE SEQUENCE CODI_PROFESION
START WITH 50
INCREMENT BY 1
MAXVALUE 99;

SELECT CODI_PROFESION.NEXTVAL FROM DUAL; 

INSERT INTO PROFESION VALUES (CODI_PROFESION.CURRVAL, 'INGENIERÍA CIVIL');
INSERT INTO PROFESIONXCANDIDATO VALUES (100, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'RELACIONES INTERNACIONALES');
INSERT INTO PROFESIONXCANDIDATO VALUES (101, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'FILOSOFÍA');
INSERT INTO PROFESIONXCANDIDATO VALUES (102, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'SOCIOLOGÍA');
INSERT INTO PROFESIONXCANDIDATO VALUES (103, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'CIENCIAS POLÍTICAS');
INSERT INTO PROFESIONXCANDIDATO VALUES (104, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESIONXCANDIDATO VALUES (107, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'ECONOMÍA');
INSERT INTO PROFESIONXCANDIDATO VALUES (104, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESIONXCANDIDATO VALUES (110, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'PSICOLOGÍA');
INSERT INTO PROFESIONXCANDIDATO VALUES (105, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'ADMINISTRACIÓN DE EMPRESAS');
INSERT INTO PROFESIONXCANDIDATO VALUES (106, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'PERIODISMO');
INSERT INTO PROFESIONXCANDIDATO VALUES (108, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESIONXCANDIDATO VALUES (112, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'INGENIERÍA DE SANIDAD');
INSERT INTO PROFESIONXCANDIDATO VALUES (109, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'HISTORIA');
INSERT INTO PROFESIONXCANDIDATO VALUES (110, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'BIOLOGÍA');
INSERT INTO PROFESIONXCANDIDATO VALUES (111, CODI_PROFESION.CURRVAL);
INSERT INTO PROFESION VALUES (CODI_PROFESION.NEXTVAL, 'DERECHO');
INSERT INTO PROFESIONXCANDIDATO VALUES (113, CODI_PROFESION.CURRVAL);
COMMIT;
COMMIT;
PROMPT INSERT CARGOPUBLICO
INSERT INTO CARGOPUBLICO VALUES (200, 'CONCEJO DE ARMENIA');
INSERT INTO CARGOPUBLICO VALUES (201, 'DIPUTADO DE LA ASAMBLEA DE QUINDÍO');
INSERT INTO CARGOPUBLICO VALUES (202, 'REPRESENTANTE A LA CÁMARA POR QUINDÍO');
INSERT INTO CARGOPUBLICO VALUES (203, 'SENADO DE LA REPÚBLICA');
INSERT INTO CARGOPUBLICO VALUES (204, 'PRESIDENCIA DEL FONDO NACIONAL DEL AHORRO');
INSERT INTO CARGOPUBLICO VALUES (205, 'CONCEJO DE BOGOTÁ');
INSERT INTO CARGOPUBLICO VALUES (206, 'ALCALDÍA DE BOGOTÁ');
INSERT INTO CARGOPUBLICO VALUES (207, 'MINISTRO CONSEJERO PARA EL DIÁLOGO SOCIAL');
INSERT INTO CARGOPUBLICO VALUES (208, 'MINISTERIO DEL TRABAJO');
INSERT INTO CARGOPUBLICO VALUES (209, 'DIRECCIÓN DE PLANEACIÓN DEL MINISTERIO DE TRABAJO');
INSERT INTO CARGOPUBLICO VALUES (210, 'DIRECCIÓN GENERAL DEL SERVICIO PÚBLICO DE EMPLEO');
INSERT INTO CARGOPUBLICO VALUES (211, 'VICEMINISTERIO DE TRABAJO');
INSERT INTO CARGOPUBLICO VALUES (212, 'VICEMINISTERIO DEL INTERIOR');
INSERT INTO CARGOPUBLICO VALUES (213, 'REPRESENTANTE A LA CÁMARA POR BOGOTÁ');
INSERT INTO CARGOPUBLICO VALUES (214, 'DIRECCIÓN DE LA AGENCIA PRESIDENCIAL PARA LA ACCIÓN SOCIAL');
INSERT INTO CARGOPUBLICO VALUES (215, 'DIRECCIÓN DEL ICBF');
INSERT INTO CARGOPUBLICO VALUES (216, 'SECRETARÍA DE ACCIÓN SOCIAL DE BOGOTÁ D.C.');
INSERT INTO CARGOPUBLICO VALUES (217, 'GERENCIA DEL CANAL CAPITAL');
INSERT INTO CARGOPUBLICO VALUES (218, 'MINISTERIO DE SALUD');
INSERT INTO CARGOPUBLICO VALUES (219, 'ALCALDÍA DE PASTO');
INSERT INTO CARGOPUBLICO VALUES (220, 'GOBERNACIÓN DE NARIÑO');
INSERT INTO CARGOPUBLICO VALUES (221, 'SECRETARÍA DE GOBIERNO DE BOGOTÁ');
INSERT INTO CARGOPUBLICO VALUES (222, 'DIRECCIÓN DEL SERVICIO NACIONAL DE APRENDIZAJE');
INSERT INTO CARGOPUBLICO VALUES (223, 'SECRETARÍA DE INTEGRACIÓN SOCIAL');
COMMIT;
PROMPT CANDIDATOXCARGO_PUBLICO
------------------RICARDO ARIAS MORA
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (100, 200, (TO_DATE('01/01/1990', 'DD/MM/YYYY')), (TO_DATE('01/01/1992', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (100, 201, (TO_DATE('01/01/1994', 'DD/MM/YYYY')), (TO_DATE('01/01/1997', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (100, 202, (TO_DATE('20/07/2002', 'DD/MM/YYYY')), (TO_DATE('20/07/2006', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (100, 203, (TO_DATE('20/07/2006', 'DD/MM/YYYY')), (TO_DATE('20/07/2010', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (100, 204, (TO_DATE('20/07/2010', 'DD/MM/YYYY')), (TO_DATE('20/07/2014', 'DD/MM/YYYY')));
-----------------CARLOS FERNANDO GALAN
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (101, 205, (TO_DATE('01/02/2008', 'DD/MM/YYYY')), (TO_DATE('01/02/2011', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (101, 203, (TO_DATE('20/07/2014', 'DD/MM/YYYY')), (TO_DATE('20/07/2018', 'DD/MM/YYYY')));
----------------ANGELA GARZÓN
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (102, 205, (TO_DATE('01/02/2016', 'DD/MM/YYYY')), (TO_DATE('01/02/2019', 'DD/MM/YYYY')));
----------------LUIS EDUARDO GARZÓN
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (103, 206, (TO_DATE('01/01/2004', 'DD/MM/YYYY')), (TO_DATE('31/12/2007', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (103, 207, (TO_DATE('01/01/2012', 'DD/MM/YYYY')), (TO_DATE('01/01/2014', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (103, 208, (TO_DATE('11/08/2014', 'DD/MM/YYYY')), (TO_DATE('23/04/2016', 'DD/MM/YYYY')));
---------------LUIS ERNESTO GÓMEZ
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (104, 209, (TO_DATE('01/01/2012', 'DD/MM/YYYY')), (TO_DATE('01/01/2013', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (104, 210, (TO_DATE('01/01/2013', 'DD/MM/YYYY')), (TO_DATE('01/01/2014', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (104, 211, (TO_DATE('01/01/2015', 'DD/MM/YYYY')), (TO_DATE('01/01/2015', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (104, 212, (TO_DATE('01/01/2016', 'DD/MM/YYYY')), (TO_DATE('07/08/2018', 'DD/MM/YYYY')));
----------------SAMUEL HOYOS
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (105, 213, (TO_DATE('20/07/2014', 'DD/MM/YYYY')), NULL);
----------------DIEGO MOLANO
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (106, 214, (TO_DATE('01/01/2009', 'DD/MM/YYYY')), (TO_DATE('01/01/2011', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (106, 215, (TO_DATE('01/01/2011', 'DD/MM/YYYY')), (TO_DATE('01/01/2013', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (106, 205, (TO_DATE('01/02/2016', 'DD/MM/YYYY')), (TO_DATE('01/02/2019', 'DD/MM/YYYY')));
----------------CLAUDIA LÓPEZ
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (107, 216, (TO_DATE('01/01/1998', 'DD/MM/YYYY')), (TO_DATE('01/01/2000', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (107, 206, (TO_DATE('20/07/2014', 'DD/MM/YYYY')), (TO_DATE('20/07/2018', 'DD/MM/YYYY')));

----------------HOLLMAN MORRIS
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (108, 217, (TO_DATE('24/02/2012', 'DD/MM/YYYY')), (TO_DATE('24/10/2014', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (108, 205, (TO_DATE('01/02/2016', 'DD/MM/YYYY')), (TO_DATE('01/02/2019', 'DD/MM/YYYY')));
----------------ANTONIO NAVARRO WOLFF
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (109, 218, (TO_DATE('01/01/1990', 'DD/MM/YYYY')), (TO_DATE('01/01/1991', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (109, 219, (TO_DATE('01/01/1995', 'DD/MM/YYYY')), (TO_DATE('31/12/1997', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (109, 213, (TO_DATE('20/07/1998', 'DD/MM/YYYY')), (TO_DATE('20/07/2002', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (109, 220, (TO_DATE('01/01/2008', 'DD/MM/YYYY')), (TO_DATE('31/12/2011', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (109, 221, (TO_DATE('01/01/2012', 'DD/MM/YYYY')), (TO_DATE('30/03/2012', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (109, 203, (TO_DATE('20/07/2002', 'DD/MM/YYYY')), (TO_DATE('20/07/2006', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (109, 203, (TO_DATE('20/07/2014', 'DD/MM/YYYY')), (TO_DATE('20/07/2018', 'DD/MM/YYYY')));
------------------MARIA ANDREA NIETO
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (110, 222, (TO_DATE('27/04/2017', 'DD/MM/YYYY')), (TO_DATE('01/11/2017', 'DD/MM/YYYY')));
------------------CELIO NIEVES
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (111, 205, (TO_DATE('01/02/2007', 'DD/MM/YYYY')), (TO_DATE('01/02/2019', 'DD/MM/YYYY')));
------------------JORGE ROJAS RODRÍGUEZ
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (112, 223, (TO_DATE('01/01/2013', 'DD/MM/YYYY')), (TO_DATE('01/01/2015', 'DD/MM/YYYY')));
------------------MIGUEL URIBE TURBAY
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (113, 205, (TO_DATE('01/02/2012', 'DD/MM/YYYY')), (TO_DATE('01/02/2015', 'DD/MM/YYYY')));
INSERT INTO CANDIDATOXCARGO_PUBLICO VALUES (113, 221, (TO_DATE('01/01/2016', 'DD/MM/YYYY')), (TO_DATE('01/01/2018', 'DD/MM/YYYY')));
COMMIT;

PROMPT CONSULTA 1
--Nombre de candidato, cantidad de profesiones con las que cuenta, cantidad de cargos públicos que ha ejercido, fecha del inicio del primer cargo público,
--fecha de fin del último cargo público. Si el registro tiene fechaDesde, sin fechaHasta se entiende que continúa en ese cargo,
--y debe mostrar como fecha fin la fecha actual del servidor. SI el candidato no tiene experiencia
WITH CANTPROFESIONES (CODIGO_CANDIDATO, NUM_PROFESIONES) AS (
SELECT PXC.CODIGO_CANDIDATO, (COUNT(PXC.CODIGO_PROFESION))
FROM PROFESIONXCANDIDATO PXC, CANDIDATO C
WHERE C.CODIGO_CANDIDATO=PXC.CODIGO_CANDIDATO
GROUP BY PXC.CODIGO_CANDIDATO
),

CANTCARGOSPUBLICOS (CODIGO_CANDIDATO, NUM_CARGOS) AS (
SELECT CXCP.CODIGO_CANDIDATO, (COUNT(CXCP.CODIGO_CARGO_PUBLICO))
FROM CANDIDATOXCARGO_PUBLICO CXCP, CANDIDATO C
WHERE C.CODIGO_CANDIDATO=CXCP.CODIGO_CANDIDATO
GROUP BY CXCP.CODIGO_CANDIDATO),

FECHAPRIMERCARGO (CODIGO_CANDIDATO, FECHA_INICIAL) AS (
SELECT CXCP.CODIGO_CANDIDATO, (MIN(CXCP.FECHA_DESDE))
FROM CANDIDATOXCARGO_PUBLICO CXCP, CANDIDATO C
WHERE C.CODIGO_CANDIDATO=CXCP.CODIGO_CANDIDATO
GROUP BY CXCP.CODIGO_CANDIDATO),

FECHAULTIMOCARGO (CODIGO_CANDIDATO, FECHA_FINAL) AS (
SELECT CXCP.CODIGO_CANDIDATO, (MAX(CXCP.FECHA_HASTA))
FROM CANDIDATOXCARGO_PUBLICO CXCP, CANDIDATO C
WHERE C.CODIGO_CANDIDATO=CXCP.CODIGO_CANDIDATO
GROUP BY CXCP.CODIGO_CANDIDATO)

SELECT C.NOMBRES|| ' '  || C.APELLIDOS AS NOMBRE_COMPLETO, NVL(TO_CHAR(CP.NUM_PROFESIONES),'0') AS NUM_PROFESIONES, NVL(TO_CHAR(CCP.NUM_CARGOS), '0') AS NUM_CARGOS,
NVL(TO_CHAR(FPC.FECHA_INICIAL), '0') AS FECHA_PRIMER_CARGO, NVL(TO_CHAR(FUC.FECHA_FINAL), (TO_CHAR(SYSDATE))) AS FECHA_FINAL
FROM CANDIDATO C NATURAL RIGHT OUTER JOIN CANTPROFESIONES CP NATURAL RIGHT OUTER JOIN CANTCARGOSPUBLICOS CCP NATURAL RIGHT OUTER JOIN FECHAPRIMERCARGO FPC NATURAL RIGHT OUTER JOIN
FECHAULTIMOCARGO FUC;
COMMIT;

PROMPT PUNTO 2
--¿Por profesión cuántos candidatos hay? Las profesiones sin candidatos deben aparecer en la lista, y candidatos sin profesión también deben aparecer como sin profesión
WITH CANTPROFESION (CODIGO_PROFESION, NUM_PROFESION) AS (
SELECT CODIGO_PROFESION, COUNT(CODIGO_PROFESION)
FROM PROFESIONXCANDIDATO PXC RIGHT JOIN PROFESION P USING (CODIGO_PROFESION)
GROUP BY CODIGO_PROFESION),

TOTALPROFESIONES (CODIGO_PROFESION, NUM_PROFESION) AS(
SELECT CODIGO_PROFESION, COUNT(CPR.NUM_PROFESION)
FROM PROFESIONXCANDIDATO PXC INNER JOIN CANTPROFESION CPR USING (CODIGO_PROFESION)
GROUP BY CODIGO_PROFESION
)

SELECT NVL(TO_CHAR(P.DESCRIPCION), 'SIN PROFESION') AS PROFESIÓN, CPR.NUM_PROFESION AS CANTIDAD
FROM PROFESION P NATURAL RIGHT OUTER JOIN CANTPROFESION CPR
UNION
SELECT 'TOTAL' AS DESCRIPCION, COUNT(NUM_PROFESION) AS CANTIDAD
FROM PROFESIONXCANDIDATO PXC NATURAL RIGHT OUTER JOIN TOTALPROFESIONES TP;
COMMIT;

PROMPT PUNTO 3
--¿Cuántos candidatos hombres, y cuantos mujeres, porcentaje de candidatos hombres, porcentaje de candidatos mujeres, por partido?.
WITH CANTMILITANTESM (CODIGO_PARTIDO, CODIGO_CANDIDATOM) AS (
SELECT CODIGO_PARTIDO, COUNT(C.CODIGO_CANDIDATO)
FROM PARTIDO P INNER JOIN CANDIDATO C USING (CODIGO_PARTIDO)
WHERE C.GENERO='M'
GROUP BY CODIGO_PARTIDO
),

CANTMILITANTESF (CODIGO_PARTIDO, CODIGO_CANDIDATOF) AS (
SELECT CODIGO_PARTIDO, COUNT(C.CODIGO_CANDIDATO)
FROM PARTIDO P INNER JOIN CANDIDATO C USING (CODIGO_PARTIDO)
WHERE C.GENERO='F'
GROUP BY CODIGO_PARTIDO
),
CANTMILITANTES(CODIGO_PARTIDO, CODIGO_CANDIDATO) AS(
SELECT CODIGO_PARTIDO,COUNT(C.CODIGO_CANDIDATO)
FROM PARTIDO P INNER JOIN CANDIDATO C USING (CODIGO_PARTIDO)
GROUP BY CODIGO_PARTIDO
)

SELECT P.NOMBRE_PARTIDO, NVL(TO_CHAR(CM.CODIGO_CANDIDATOM), '0') AS NUMERO_HOMBRES, NVL(TO_CHAR(CF.CODIGO_CANDIDATOF), '0') AS NUMERO_MUJERES, NVL(ROUND(TO_CHAR((CM.CODIGO_CANDIDATOM/CMI.CODIGO_CANDIDATO)*100)),'0') AS PORCENTAJE_HOMBRES, NVL(ROUND(TO_CHAR((CF.CODIGO_CANDIDATOF/CMI.CODIGO_CANDIDATO)*100)),'0') AS PORCENTAJE_MUJERES
FROM PARTIDO P NATURAL RIGHT OUTER JOIN CANTMILITANTESM CM NATURAL LEFT OUTER JOIN CANTMILITANTESF CF NATURAL LEFT OUTER JOIN CANTMILITANTES CMI;

PROMPT PUNTO 4: CANDIDATOS MAS JÓVENES
-- Nombre, apellidos, edad a la fecha en la cual se ejecuta la consulta, de los 3 candidatos más jóvenes, ordenados del más joven al más viejo.
WITH PUNTO4 (NOMBRE_COMPLETO, EDAD_ACTUAL) AS (
SELECT C.NOMBRES || ' ' || C.APELLIDOS AS NOMBRE_COMPLETO, TRUNC((SYSDATE-C.FECHA_NACIMIENTO)/365) AS EDAD
FROM CANDIDATO C
ORDER BY TRUNC((SYSDATE-C.FECHA_NACIMIENTO)/365)
)

SELECT PT4.NOMBRE_COMPLETO, PT4.EDAD_ACTUAL
FROM PUNTO4 PT4
WHERE ROWNUM<=3;
COMMIT;

PROMPT PUNTO 5
--Año, número de candidatos que nacieron ese año, nombre de los candidatos.
col NOMBRES FORMAT A80
WITH CANDIDATOSXAÑO (FECHA, NUM_CANDIDATOS) AS(
SELECT EXTRACT(year from c.fecha_nacimiento), count(C.CODIGO_CANDIDATO)
from CANDIDATO C
GROUP BY EXTRACT(year from c.fecha_nacimiento) 
),

NOMBRESCANDIDATOSXAÑO (FECHA, NOMBRE_CANDIDATOS) AS(
SELECT EXTRACT(year from c.fecha_nacimiento), LISTAGG((C.NOMBRES || ' ' || C.APELLIDOS), ', ') WITHIN GROUP (ORDER BY EXTRACT(year from c.fecha_nacimiento))
FROM CANDIDATO C
GROUP BY EXTRACT(year from c.fecha_nacimiento)
)

SELECT EXTRACT(year from c.fecha_nacimiento) AS AÑO, COUNT(CXA.NUM_CANDIDATOS) AS NUM_CANDIDATOS, NCXA.NOMBRE_CANDIDATOS  AS NOMBRES 
FROM CANDIDATO C inner join CANDIDATOSXAÑO CXA on EXTRACT(year from c.fecha_nacimiento)=CXA.FECHA NATURAL LEFT OUTER JOIN NOMBRESCANDIDATOSXAÑO NCXA 
GROUP BY EXTRACT(year from c.fecha_nacimiento), NCXA.NOMBRE_CANDIDATOS
ORDER BY EXTRACT(year from c.fecha_nacimiento);
COMMIT;

PROMPT PUNTO 6
--Candidatos por partido.
COL NOMBRES FORMAT A120
WITH CANDIDATOSXPARTIDO (CODPARTIDO, NUM_CANDIDATOS) AS (
SELECT CODIGO_PARTIDO, COUNT(C.CODIGO_CANDIDATO)
FROM CANDIDATO C INNER JOIN PARTIDO P USING (CODIGO_PARTIDO)
GROUP BY CODIGO_PARTIDO
),

NOMBRECANDIDATOSXPARTIDO (CODPARTIDO, NOMBRE_CANDIDATOS) AS (
SELECT CODIGO_PARTIDO, LISTAGG((C.NOMBRES || ' ' || C.APELLIDOS), ', ') WITHIN GROUP (ORDER BY CODIGO_PARTIDO)
FROM CANDIDATO C
GROUP BY CODIGO_PARTIDO
)

SELECT P.NOMBRE_PARTIDO, CXP.NUM_CANDIDATOS, NCXP. NOMBRE_CANDIDATOS AS NOMBRES
FROM PARTIDO P INNER JOIN CANDIDATOSXPARTIDO CXP ON (P.CODIGO_PARTIDO=CXP.CODPARTIDO) NATURAL LEFT OUTER JOIN NOMBRECANDIDATOSXPARTIDO NCXP;
COMMIT;

PROMPT PUNTO 7
--Inserte como profesión para todos los candidatos la profesión político. Una vez hecho esto ejecute la siguiente consulta.
--Que profesión(es) comparten todos los candidatos. Después del insert ejecutado, debería salir por lo menos la profesión político.
INSERT INTO PROFESION VALUES (63, 'POLITICO');
INSERT INTO PROFESIONXCANDIDATO
SELECT CAN.CODIGO_CANDIDATO, 63
FROM CANDIDATO CAN;

WITH PROFESIONES_REPETIDAS (CODIGO_PROFESION, NUMERO) AS (
SELECT PXC.CODIGO_PROFESION, COUNT(PXC.CODIGO_PROFESION)
FROM PROFESIONXCANDIDATO PXC
GROUP BY pxc.codigo_profesion),
NUMERO_CANDIDATOS(N_MAXIMO) AS (
SELECT COUNT(*)
FROM CANDIDATO),
PROFESION_MAXIMA(CODIGO_PROFESION,DESCRIPCION, MAXIMACANTIDAD) AS(
SELECT PR.CODIGO_PROFESION,PRO.DESCRIPCION,PR.NUMERO
FROM PROFESIONES_REPETIDAS PR,NUMERO_CANDIDATOS MC, PROFESION PRO
WHERE PR.NUMERO=MC.N_MAXIMO AND PRO.CODIGO_PROFESION=PR.CODIGO_PROFESION)
SELECT * FROM PROFESION_MAXIMA;
COMMIT;

PROMPT PUNTO 8
--Suponga que cada partido, con más de un candidato decidió dejar el candidato más joven como candidato de su partido.
--Ejecute la(s) instrucción(es) que deje en la tabla de candidatos máximo un candidato de acuerdo a la suposición anterior.
COL NOMBRES FORMAT A50;
WITH CANDIDATOSXPARTIDO (CODPARTIDO, NUM_CANDIDATOS) AS (
SELECT CODIGO_PARTIDO, COUNT(C.CODIGO_CANDIDATO)
FROM CANDIDATO C INNER JOIN PARTIDO P USING (CODIGO_PARTIDO)
GROUP BY CODIGO_PARTIDO
HAVING COUNT(C.CODIGO_CANDIDATO)>1
),
CODIGOCANDIDATO (CODIGO_CANDIDATO, FECHA_NACIMIENTO, CODPARTIDO) AS (
SELECT C.CODIGO_CANDIDATO, C.FECHA_NACIMIENTO, CXP.CODPARTIDO
FROM CANDIDATO C, CANDIDATOSXPARTIDO CXP
WHERE C.CODIGO_PARTIDO = CXP.CODPARTIDO
),
MENORFECHA (FECHA) AS (  
SELECT MAX(CC.FECHA_NACIMIENTO)
FROM CODIGOCANDIDATO CC
GROUP BY CC.CODPARTIDO
)
SELECT P.NOMBRE_PARTIDO, (CAN.NOMBRES || ' ' || CAN.APELLIDOS) AS NOMBRES, can.fecha_nacimiento
FROM MENORFECHA MF, CANDIDATO CAN, PARTIDO P
WHERE MF.FECHA = CAN.FECHA_NACIMIENTO AND P.CODIGO_PARTIDO=can.codigo_partido;

